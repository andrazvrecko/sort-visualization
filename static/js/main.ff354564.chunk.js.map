{"version":3,"sources":["logo.svg","Algorithms/algorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["quickSortAlgorithm","array","left","right","animations","index","pivot","Math","floor","i","j","animation","compare","swap","temp","push","partition","heapify","n","largest","l","r","compareL","compareR","mergeSortHelper","mainArray","startIdx","endIdx","auxiliaryArray","middleIdx","doMerge","k","SortingVisualizer","props","onSliderChange","value","setState","speed","onSliderArrayChange","getMaxElements","state","width","arraySize","resetArray","updateWindowDimensions","bind","min","max","this","random","arrayBars","document","getElementsByClassName","length","style","backgroundColor","window","addEventListener","removeEventListener","innerWidth","bubbleSort","newAnimations","console","log","target","dist","lastElem","oneIdx","twoIdx","oneStyle","twoStyle","color","setTimeout","height","currElem","newArr","quickSort","finishArray","heapSort","tmp","selectionSort","current","update","insertionSort","slice","mergeSort","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","newHeight","amount","getBarWidth","className","map","idx","step","onChange","onClick","selectSort","insertSort","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"iPAAe,I,0DCyDTA,G,MAAqB,SAArBA,EAAsBC,EAAOC,EAAMC,EAAOC,GAC5C,IAAIC,EA3BU,SAACJ,EAAOC,EAAMC,EAAOC,GAInC,IAHA,IAAIE,EAAQL,EAAMM,KAAKC,OAAOL,EAAQD,GAAQ,IAC1CO,EAAIP,EACJQ,EAAIP,EACDM,GAAKC,GAAG,CACX,KAAOT,EAAMQ,GAAKH,GACdG,IAEJ,KAAOR,EAAMS,GAAKJ,GACdI,IAEJ,IAAIC,EAAY,GAEhB,GADAA,EAAUC,QAAU,CAACH,EAAGC,GACpBD,GAAKC,EAAG,CACRC,EAAUE,KAAO,CAACJ,EAAGC,GACrB,IAAII,EAAOb,EAAMQ,GACjBR,EAAMQ,GAAKR,EAAMS,GACjBT,EAAMS,GAAKI,EACXL,IACAC,IAEJN,EAAWW,KAAKJ,GAEpB,OAAOF,EAIKO,CAAUf,EAAOC,EAAMC,EAAOC,GAQ1C,OANIF,EAAOG,EAAQ,GACfL,EAAmBC,EAAOC,EAAMG,EAAQ,EAAGD,GAE3CC,EAAQF,GACRH,EAAmBC,EAAOI,EAAOF,EAAOC,GAErCH,IAGLgB,EAAU,SAAVA,EAAWhB,EAAOiB,EAAGT,EAAGL,GAC1B,IAAIe,EAAUV,EACVW,EAAI,EAAIX,EAAI,EACZY,EAAI,EAAIZ,EAAI,EACZE,EAAY,GAShB,GARAA,EAAUW,SAAW,CAACF,EAAGD,GACtBC,EAAIF,GAAKjB,EAAMmB,GAAKnB,EAAMkB,KACzBA,EAAUC,GAEdT,EAAUY,SAAW,CAACF,EAAGF,GACtBE,EAAIH,GAAKjB,EAAMoB,GAAKpB,EAAMkB,KACzBA,EAAUE,GAEXF,GAAWV,EAAE,CACZE,EAAUE,KAAO,CAACJ,EAAGU,GACrB,IAAML,EAAOb,EAAMQ,GACnBR,EAAMQ,GAAKR,EAAMkB,GACjBlB,EAAMkB,GAAWL,EAEjBV,EAAWW,KAAKJ,GAEhBM,EAAQhB,EAAOiB,EAAGC,EAASf,KAoF7BoB,EAAkB,SAAlBA,EAAmBC,EAAWC,EAAUC,EAAQC,EAAgBxB,GAClE,GAAIsB,IAAaC,EAAjB,CACA,IAAME,EAAYtB,KAAKC,OAAOkB,EAAWC,GAAU,GACnDH,EAAgBI,EAAgBF,EAAUG,EAAWJ,EAAWrB,GAChEoB,EAAgBI,EAAgBC,EAAY,EAAGF,EAAQF,EAAWrB,GAClE0B,EAAQL,EAAWC,EAAUG,EAAWF,EAAQC,EAAgBxB,KAG9D0B,EAAU,SAACL,EAAWC,EAAUG,EAAWF,EAAQC,EAAgBxB,GAIrE,IAHA,IAAI2B,EAAIL,EACJjB,EAAIiB,EACJhB,EAAImB,EAAY,EACbpB,GAAKoB,GAAanB,GAAKiB,GAC5BvB,EAAWW,KAAK,CAACN,EAAGC,IACpBN,EAAWW,KAAK,CAACN,EAAGC,IAChBkB,EAAenB,IAAMmB,EAAelB,IACtCN,EAAWW,KAAK,CAACgB,EAAGH,EAAenB,KACnCgB,EAAUM,KAAOH,EAAenB,OAEhCL,EAAWW,KAAK,CAACgB,EAAGH,EAAelB,KACnCe,EAAUM,KAAOH,EAAelB,MAGpC,KAAOD,GAAKoB,GACVzB,EAAWW,KAAK,CAACN,EAAGA,IACpBL,EAAWW,KAAK,CAACN,EAAGA,IACpBL,EAAWW,KAAK,CAACgB,EAAGH,EAAenB,KACnCgB,EAAUM,KAAOH,EAAenB,KAElC,KAAOC,GAAKiB,GACVvB,EAAWW,KAAK,CAACL,EAAGA,IACpBN,EAAWW,KAAK,CAACL,EAAGA,IACpBN,EAAWW,KAAK,CAACgB,EAAGH,EAAelB,KACnCe,EAAUM,KAAOH,EAAelB,M,QCxMjBsB,G,wDACjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAuVVC,eAAiB,SAAAC,GACb,EAAKC,SAAS,CAACC,MAAOF,KAzVR,EA2VlBG,oBAAsB,SAAAH,GACdA,EAAQI,EAAe,EAAKC,MAAMC,SAClC,EAAKL,SAAS,CAACM,UAAWP,IAC1B,EAAKQ,eA3VT,EAAKH,MAAQ,CACTvC,MAAO,GACPwC,MAAO,EACPJ,MAAO,EACPK,UAAW,KAEf,EAAKE,uBAAyB,EAAKA,uBAAuBC,KAA5B,gBAThB,E,yDAad,IAqYuBC,EAAKC,EArYtB9C,EAAQ,GAEX+C,KAAKR,MAAME,UAAYH,EAAeS,KAAKR,MAAMC,QAChDO,KAAKZ,SAAS,CAACM,UAAWH,EAAeS,KAAKR,MAAMC,SAGxD,IAAI,IAAIhC,EAAI,EAAGA,EAAIuC,KAAKR,MAAME,UAAWjC,IACrCR,EAAMc,MA8Xa+B,EA9Xc,EA8XTC,EA9XW,IA+XpCxC,KAAKC,MAAMD,KAAK0C,UAAYF,EAAMD,EAAM,GAAMA,KA7XjDE,KAAKZ,SAAS,CAACnC,UAGf,IADA,IAAMiD,EAAYC,SAASC,uBAAuB,aAC1C3C,EAAI,EAAGA,EAAIyC,EAAUG,OAAQ5C,IACjCyC,EAAUzC,GAAG6C,MAAMC,gBAAgB,U,0CAKvCP,KAAKJ,yBACLY,OAAOC,iBAAiB,SAAUT,KAAKJ,wBACvCI,KAAKL,e,6CAILa,OAAOE,oBAAoB,SAAUV,KAAKJ,0B,+CAI1CI,KAAKZ,SAAS,CAAEK,MAAOe,OAAOG,aAC9BX,KAAKL,e,mCAGK,IAAD,OACHvC,EDtDY,SAAAH,GACtB,IAAMG,EAAa,GACnB,GAAIH,EAAMoD,QAAU,EAAG,OAAOpD,EAE9B,IAAK,IAAIQ,EAAI,EAAGA,EAAIR,EAAMoD,OAAS,EAAG5C,IACxC,IAAK,IAAIC,EAAI,EAAGA,EAAIT,EAAMoD,OAAS,EAAI5C,EAAGC,IAAK,CACrC,IAAIC,EAAY,GAEhB,GADAA,EAAUC,QAAU,CAACF,EAAGA,EAAE,GACtBT,EAAMS,GAAKT,EAAMS,EAAI,GAAI,CACzBC,EAAUE,KAAO,CAACH,EAAGA,EAAE,GACnC,IAAII,EAAOb,EAAMS,GACjBT,EAAMS,GAAKT,EAAMS,EAAI,GACrBT,EAAMS,EAAI,GAAKI,EAEPV,EAAWW,KAAKJ,GAG3B,OAAOP,ECqCmBwD,CAAWZ,KAAKR,MAAMvC,OACnC4D,EAAgB,GACtBC,QAAQC,IAAIf,KAAKR,MAAMvC,OACvB6D,QAAQC,IAAI3D,GAJH,oBAKcA,GALd,IAKT,IAAI,EAAJ,qBAAkC,CAAC,IAAzBO,EAAwB,QAC9BkD,EAAc9C,KAAKJ,EAAUC,SAC7BiD,EAAc9C,KAAKJ,EAAUC,SAC7BiD,EAAc9C,KAAKJ,EAAUE,OARxB,8BAcT,IAJA,IAAImD,EAAS,EAAIhB,KAAKR,MAAMvC,MAAMoD,OAAS,EACvCY,EAAO,EAAkC,GAA7BjB,KAAKR,MAAMvC,MAAMoD,OAAS,GACtCa,EAAWlB,KAAKR,MAAMvC,MAAMoD,OAAS,EAZhC,WAcD5C,GACJ,IAAMyC,EAAYC,SAASC,uBAAuB,aAElD,GADsB3C,EAAI,IAAM,EACb,CAAC,IAAD,cACUoD,EAAcpD,GADxB,GACR0D,EADQ,KACAC,EADA,KAETC,EAAWnB,EAAUiB,GAAQb,MAC7BgB,EAAWpB,EAAUkB,GAAQd,MAC7BiB,EAAQ9D,EAAI,IAAM,EAAI,UAAY,QACxC+D,YAAW,WACPH,EAASd,gBAAkBgB,EAC3BD,EAASf,gBAAkBgB,IAE7B9D,GAAK,EAAE,EAAK+B,MAAMH,aAEpBmC,YAAW,WACP,GAAgC,qBAArBX,EAAcpD,GAAmB,CAAC,IAAD,cACfoD,EAAcpD,GADC,GACjC0D,EADiC,KACzBC,EADyB,KAElCC,EAAWnB,EAAUiB,GAAQb,MAC7BgB,EAAWpB,EAAUkB,GAAQd,MAC7BxC,EAAOuD,EAASI,OACtBJ,EAASI,OAASH,EAASG,OAC3BH,EAASG,OAAS3D,KAGxBL,GAAK,EAAE,EAAK+B,MAAMH,QAExB,GAAG5B,EAAI,IAAMuD,EAAO,CAChBF,QAAQC,IAAI,WAAYC,EAAQ,cAAeC,EAAM,UAAWC,GAChEF,GAAkBC,EAClBA,GAAc,EACd,IAAMS,EAAWR,EACjBA,GAAsB,EACtBM,YAAW,WACPtB,EAAUwB,GAAUpB,MAAMC,gBAAgB,SAE5C9C,GAAK,EAAE,EAAK+B,MAAMH,UAnCpB5B,EAAI,EAAGA,EAAIoD,EAAcR,OAAQ5C,IAAK,EAAtCA,GAsCR,IAAMyC,EAAYC,SAASC,uBAAuB,aAClDoB,YAAW,WACPtB,EAAU,GAAGI,MAAMC,gBAAgB,SAErCM,EAAcR,QAAU,EAAEL,KAAKR,MAAMH,U,kCAG9B,IAAD,OACFjC,ED7FW,SAAAH,GACrB,GAAIA,EAAMoD,QAAU,EAAG,OAAOpD,EAE9B,IAAMG,EAAa,GACbuE,EAAS3E,EAAmBC,EAAO,EAAGA,EAAMoD,OAAS,EAAGjD,GAG9D,OADA0D,QAAQC,IAAIY,GACLvE,ECsFgBwE,CAAU5B,KAAKR,MAAMvC,OAClC4D,EAAgB,GACtBC,QAAQC,IAAIf,KAAKR,MAAMvC,OACvB6D,QAAQC,IAAI3D,GAJJ,oBAKeA,GALf,IAKR,IAAI,EAAJ,qBAAkC,CAAC,IAAzBO,EAAwB,QAC9BkD,EAAc9C,KAAKJ,EAAUC,SAC7BiD,EAAc9C,KAAKJ,EAAUC,SAC7BiD,EAAc9C,KAAKJ,EAAUE,OARzB,8BAURiD,QAAQC,IAAIF,GACZ,IAXQ,eAWApD,GACJ,IAAMyC,EAAYC,SAASC,uBAAuB,aAElD,GADsB3C,EAAI,IAAM,EACb,CAAC,IAAD,cACUoD,EAAcpD,GADxB,GACR0D,EADQ,KACAC,EADA,KAETC,EAAWnB,EAAUiB,GAAQb,MAC7BgB,EAAWpB,EAAUkB,GAAQd,MAC7BiB,EAAQ9D,EAAI,IAAM,EAAI,UAAY,QACxC+D,YAAW,WACPH,EAASd,gBAAkBgB,EAC3BD,EAASf,gBAAkBgB,IAEzB,GAAJ9D,GAAU,EAAE,EAAK+B,MAAMH,aAEzBmC,YAAW,WACP,GAAgC,qBAArBX,EAAcpD,GAAmB,CAAC,IAAD,cACfoD,EAAcpD,GADC,GACjC0D,EADiC,KACzBC,EADyB,KAElCC,EAAWnB,EAAUiB,GAAQb,MAC7BgB,EAAWpB,EAAUkB,GAAQd,MAC7BxC,EAAOuD,EAASI,OACtBJ,EAASI,OAASH,EAASG,OAC3BH,EAASG,OAAS3D,KAGpB,GAAJL,GAAU,EAAE,EAAK+B,MAAMH,SAxBzB5B,EAAI,EAAGA,EAAIoD,EAAcR,OAAQ5C,IAAK,EAAtCA,GA2BR+D,YAAW,WACP,EAAKK,gBAEgB,GAAvBhB,EAAcR,QAAe,EAAEL,KAAKR,MAAMH,U,iCAGrC,IAAD,SACAjC,ED9DW,SAAAH,GACrB,IAAMiB,EAAIjB,EAAMoD,OACVjD,EAAa,GAEnB0D,QAAQC,IAAI,2BACZ,IAAI,IAAItD,EAAEF,KAAKC,MAAMU,EAAE,GAAG,EAAET,GAAG,EAAEA,IAC7BQ,EAAQhB,EAAOiB,EAAGT,EAAGL,GAEzB0D,QAAQC,IAAI,2BAEZ,IAAI,IAAItD,EAAIS,EAAI,EAAGT,EAAI,EAAGA,IAAI,CAC1B,IAAIE,EAAY,GACVG,EAAOb,EAAM,GACnBA,EAAM,GAAKA,EAAMQ,GACjBR,EAAMQ,GAAKK,EACXH,EAAUE,KAAO,CAAC,EAAEJ,GACpBL,EAAWW,KAAKJ,GAChBM,EAAQhB,EAAOQ,EAAG,EAAGL,GAEzB,OAAOA,EC2CgB0E,CAAS9B,KAAKR,MAAMvC,OACjC4D,EAAgB,GAFhB,cAGiBzD,GAHjB,IAGN,IAAI,EAAJ,qBAAkC,CAAC,IAAzBO,EAAwB,QAC9BkD,EAAc9C,KAAKJ,EAAUW,UAC7BuC,EAAc9C,KAAKJ,EAAUW,UAC7BuC,EAAc9C,KAAKJ,EAAUY,UAC7BsC,EAAc9C,KAAKJ,EAAUY,UAC7BsC,EAAc9C,KAAKJ,EAAUE,OAR3B,8BAWN,IADA,IAAIqD,EAAWlB,KAAKR,MAAMvC,MAAMoD,OAAS,EAVnC,WAWE5C,GACJ,IAAMyC,EAAYC,SAASC,uBAAuB,aAElD,GADsB3C,EAAI,IAAM,GAE5B,GAA+B,qBAArBoD,EAAcpD,GAAmB,CAAC,IAAD,cACdoD,EAAcpD,GADA,GAChC0D,EADgC,KACxBC,EADwB,KAEvC,GAAgC,qBAAtBlB,EAAUiB,IAAwD,qBAAtBjB,EAAUkB,GAG5D,OAFAN,QAAQC,IAAI,eAAgB,EAAKvB,MAAMvC,MAAMoD,OAAQ,QAASc,EAAQ,QAASC,GAC/E,EAAKzB,aACC,CAAN,UAEJ,IAAM0B,EAAWnB,EAAUiB,GAAQb,MAC7BgB,EAAWpB,EAAUkB,GAAQd,MAC7BiB,EAAQ9D,EAAI,IAAM,EAAI,UAAY,QACxC+D,YAAW,WACyB,SAA7BH,EAASd,kBACRc,EAASd,gBAAkBgB,GAEC,SAA7BD,EAASf,kBACRe,EAASf,gBAAkBgB,KAG7B,GAAJ9D,GAAU,EAAE,EAAK+B,MAAMH,cAI7BmC,YAAW,WACP,GAAgC,qBAArBX,EAAcpD,GAAmB,CAAC,IAAD,cACfoD,EAAcpD,GADC,GACjC0D,EADiC,KACzBC,EADyB,KAElCC,EAAWnB,EAAUiB,GAAQb,MAC7BgB,EAAWpB,EAAUkB,GAAQd,MAC7BxC,EAAOuD,EAASI,OACtBJ,EAASI,OAASH,EAASG,OAC3BH,EAASG,OAAS3D,EACfsD,IAAWF,GAAuB,IAAXC,IACtBG,EAASf,gBAAgB,OACzBW,GAAsB,MAI5B,GAAJzD,GAAU,EAAE,EAAK+B,MAAMH,SAxCzB5B,EAAI,EAAGA,EAAIoD,EAAcR,OAAQ5C,IAAI,CAAC,IAAD,IAArCA,GAAqC,kCA2C7C,IAAMyC,EAAYC,SAASC,uBAAuB,aAClDoB,YAAW,WACPtB,EAAU,GAAGI,MAAMC,gBAAgB,SAEd,GAAvBM,EAAcR,QAAe,EAAEL,KAAKR,MAAMH,U,mCAGnC,IAAD,OACFjC,EDrGe,SAAAH,GAGzB,IAFA,IAAIiB,EAAIjB,EAAMoD,OACRjD,EAAa,GACXK,EAAI,EAAGA,EAAIS,EAAGT,IAAK,CAEvB,IADA,IAAIqC,EAAMrC,EACFC,EAAID,EAAE,EAAGC,EAAIQ,EAAGR,IAAI,CACxB,IAAIC,EAAY,GAChBA,EAAUC,QAAU,CAACF,EAAGoC,GACrB7C,EAAMS,GAAKT,EAAM6C,KAChBA,EAAIpC,GAERN,EAAWW,KAAKJ,GAEpB,GAAImC,GAAOrC,EAAG,CACV,IAAIE,EAAY,GAChBP,EAAWQ,QAAU,CAACH,EAAGqC,GACzBnC,EAAUE,KAAO,CAACJ,EAAGqC,GACrB,IAAIiC,EAAM9E,EAAMQ,GAChBR,EAAMQ,GAAKR,EAAM6C,GACjB7C,EAAM6C,GAAOiC,EACb3E,EAAWW,KAAKJ,IAGxB,OAAOP,EC8EgB4E,CAAchC,KAAKR,MAAMvC,OACtC4D,EAAgB,GACtBC,QAAQC,IAAIf,KAAKR,MAAMvC,OACvB6D,QAAQC,IAAI3D,GAJJ,oBAKeA,GALf,IAKR,IAAI,EAAJ,qBAAkC,CAAC,IAAzBO,EAAwB,QAC9BkD,EAAc9C,KAAKJ,EAAUC,SAC7BiD,EAAc9C,KAAKJ,EAAUC,SAC7BiD,EAAc9C,KAAKJ,EAAUE,OARzB,8BAURiD,QAAQC,IAAIF,GACZ,IAXQ,eAWApD,GACJ,IAAMyC,EAAYC,SAASC,uBAAuB,aAElD,GADsB3C,EAAI,IAAM,GAE5B,GAA+B,qBAArBoD,EAAcpD,GAAmB,CAAC,IAAD,cACdoD,EAAcpD,GADA,GAChC0D,EADgC,KACxBC,EADwB,KAEjCC,EAAWnB,EAAUiB,GAAQb,MAC7BgB,EAAWpB,EAAUkB,GAAQd,MAC7BiB,EAAQ9D,EAAI,IAAM,EAAI,UAAY,QACxC+D,YAAW,WACPH,EAASd,gBAAkBgB,EAC3BD,EAASf,gBAAkBgB,IAEzB,EAAJ9D,GAAS,EAAE,EAAK+B,MAAMH,cAG5BmC,YAAW,WACP,GAAgC,qBAArBX,EAAcpD,GAAmB,CAAC,IAAD,cACfoD,EAAcpD,GADC,GACjC0D,EADiC,KACzBC,EADyB,KAElCC,EAAWnB,EAAUiB,GAAQb,MAC7BgB,EAAWpB,EAAUkB,GAAQd,MAC7BxC,EAAOuD,EAASI,OACtBJ,EAASI,OAASH,EAASG,OAC3BJ,EAASd,gBAAkB,OAC3Be,EAASG,OAAS3D,KAGpB,EAAJL,GAAS,EAAE,EAAK+B,MAAMH,SA3BxB5B,EAAI,EAAGA,EAAIoD,EAAcR,OAAQ5C,IAAK,EAAtCA,GA8BR,IAAMyC,EAAYC,SAASC,uBAAuB,aAClDoB,YAAW,WACPtB,EAAU,EAAKV,MAAMvC,MAAMoD,OAAS,GAAGC,MAAMC,gBAAgB,SAExC,EAAvBM,EAAcR,QAAc,EAAEL,KAAKR,MAAMH,U,mCAGlC,IAAD,OACFjC,ED3He,SAAAH,GAGzB,IAFA,IAAMG,EAAa,GACfc,EAAIjB,EAAMoD,OACL5C,EAAI,EAAGA,EAAIS,EAAGT,IAAK,CAIxB,IAHA,IAAIE,EAAY,GACZsE,EAAUhF,EAAMQ,GAChBC,EAAID,EAAE,EACFC,GAAK,GAAOuE,EAAUhF,EAAMS,IAAK,CACrC,IAAIC,EAAY,GAChBA,EAAUC,QAAU,CAACH,EAAGC,GACxBC,EAAUuE,OAAS,CAACxE,EAAE,EAAGA,GACzBT,EAAMS,EAAE,GAAKT,EAAMS,GACnBA,IACAN,EAAWW,KAAKJ,GAEpBA,EAAUC,QAAU,CAACH,EAAGC,EAAE,GAC1BC,EAAUuE,OAAS,CAACxE,EAAE,EAAGD,EAAGwE,GAC5BhF,EAAMS,EAAE,GAAKuE,EACb7E,EAAWW,KAAKJ,GAEpB,OAAOP,ECuGgB+E,CAAcnC,KAAKR,MAAMvC,OACtC4D,EAAgB,GACtBC,QAAQC,IAAIf,KAAKR,MAAMvC,OACvB6D,QAAQC,IAAI3D,GAJJ,oBAKeA,GALf,IAKR,IAAI,EAAJ,qBAAkC,CAAC,IAAzBO,EAAwB,QAC9BkD,EAAc9C,KAAKJ,EAAUC,SAC7BiD,EAAc9C,KAAKJ,EAAUC,SAC7BiD,EAAc9C,KAAKJ,EAAUuE,SARzB,8BAURpB,QAAQC,IAAIF,GACZ,IAXQ,eAWApD,GACJ,IAAMyC,EAAYC,SAASC,uBAAuB,aAElD,GADsB3C,EAAI,IAAM,EACb,CAAC,IAAD,cACUoD,EAAcpD,GADxB,GACR0D,EADQ,KACAC,EADA,KAETC,EAAWnB,EAAUiB,GAAQb,MAC7BgB,EAAWpB,EAAUkB,GAAQd,MAC7BiB,EAAQ9D,EAAI,IAAM,EAAI,UAAY,QACxC+D,YAAW,WACPH,EAASd,gBAAkBgB,EAC3BD,EAASf,gBAAkBgB,IAEzB,EAAJ9D,GAAS,EAAE,EAAK+B,MAAMH,aAExBmC,YAAW,WACP,GAAgC,qBAArBX,EAAcpD,GACrB,GAAGoD,EAAcpD,GAAG4C,OAAS,EAAE,CAAC,IAAD,cACKQ,EAAcpD,GADnB,GACpB0D,EADoB,KACJhC,GADI,WAEVe,EAAUiB,GAAQb,MAC1BmB,OAAT,UAAqBtC,EAArB,UAEA,CAAC,IAAD,cACyB0B,EAAcpD,GADvC,GACO0D,EADP,KACeC,EADf,KAEMC,EAAWnB,EAAUiB,GAAQb,MAC7BgB,EAAWpB,EAAUkB,GAAQd,MACnCe,EAASI,OAASH,EAASG,UAIjC,EAAJhE,GAAS,EAAE,EAAK+B,MAAMH,SA7BxB5B,EAAI,EAAGA,EAAIoD,EAAcR,OAAQ5C,IAAK,EAAtCA,GAgCR+D,YAAW,WACP,EAAKK,gBAEgB,EAAvBhB,EAAcR,QAAc,EAAEL,KAAKR,MAAMH,U,kCAK3C,IAFQ,IAAD,OACDjC,EDrJW,SAAAH,GACrB,IAAMG,EAAa,GACnB,GAAIH,EAAMoD,QAAU,EAAG,OAAOpD,EAC9B,IAAM2B,EAAiB3B,EAAMmF,QAE7B,OADA5D,EAAgBvB,EAAO,EAAGA,EAAMoD,OAAS,EAAGzB,EAAgBxB,GACrDA,ECgJgBiF,CAAUrC,KAAKR,MAAMvC,OADjC,WAEEQ,GACL,IAAMyC,EAAYC,SAASC,uBAAuB,aAElD,GADsB3C,EAAI,IAAM,EACb,CAAC,IAAD,cACgBL,EAAWK,GAD3B,GACR6E,EADQ,KACGC,EADH,KAETC,EAActC,EAAUoC,GAAWhC,MACnCmC,EAAcvC,EAAUqC,GAAWjC,MACnCiB,EAAQ9D,EAAI,IAAM,EAAI,UAAY,QACxC+D,YAAW,WACPgB,EAAYjC,gBAAkBgB,EAC9BkB,EAAYlC,gBAAkBgB,IAC3B,GAAJ9D,GAAU,EAAE,EAAK+B,MAAMH,aAE1BmC,YAAW,WAAO,IAAD,cACkBpE,EAAWK,GAD7B,GACN6E,EADM,KACKI,EADL,KAEOxC,EAAUoC,GAAWhC,MAC7BmB,OAAZ,UAAwBiB,EAAxB,QACG,GAAJjF,GAAU,EAAE,EAAK+B,MAAMH,SAjBzB5B,EAAI,EAAGA,EAAIL,EAAWiD,OAAQ5C,IAAM,EAApCA,GAoBT+D,YAAW,WACP,EAAKK,gBAEa,GAApBzE,EAAWiD,QAAe,EAAEL,KAAKR,MAAMH,U,oCAKzC,IAFU,IAAD,OACHa,EAAYC,SAASC,uBAAuB,aADzC,WAED3C,GACJ+D,YAAW,WACPtB,EAAUzC,GAAG6C,MAAMC,gBAAgB,SAEjC,GAAJ9C,GAAU,EAAE,EAAK+B,MAAMH,SAJrB5B,EAAI,EAAGA,EAAIuC,KAAKR,MAAMvC,MAAMoD,OAAQ5C,IAAK,EAAzCA,K,+BAkBD,IAAD,OACCR,EAAS+C,KAAKR,MAAdvC,MACDwC,EAsDd,SAAqBA,EAAOkD,GACxB,MAAqB,qBAAVlD,GACPA,EAAQlC,KAAKC,MAAc,IAARiC,GACJlC,KAAKC,MAAMiC,EAAMkD,GACd,GAEV,EA5DMC,CAAY5C,KAAKR,MAAMC,MAAOO,KAAKR,MAAMvC,MAAMoD,QAC7D,OACI,qCACI,qBAAKwC,UAAU,YAAf,SACK5F,EAAM6F,KAAI,SAAC3D,EAAO4D,GAAR,OACP,qBAAKF,UAAU,YAEfvC,MAAO,CAACmB,OAAO,GAAD,OAAKtC,EAAL,MAAgBM,MAAM,GAAD,OAAIA,EAAJ,QAD9BsD,QAIb,sBAAKF,UAAU,WAAf,UACI,wCAAW7C,KAAKR,MAAMH,SAClB,uBACA,cAAC,IAAD,CACIS,IAAK,IACLC,IAAK,EACLiD,KAAM,IACN7D,MAAOa,KAAKR,MAAMH,MAClB4D,SAAUjD,KAAKd,iBAEvB,6CAAgBc,KAAKR,MAAME,aAC3B,uBACA,cAAC,IAAD,CACII,IAAK,EACLC,IAAKR,EAAeS,KAAKR,MAAMC,OAC/BuD,KAAM,EACN7D,MAAOa,KAAKR,MAAME,UAClBuD,SAAUjD,KAAKV,sBAEnB,uBACA,wBAAQ4D,QAAS,kBAAM,EAAKvD,cAA5B,iCACA,uBACA,sBAAKkD,UAAU,iBAAf,UACI,wBAAQK,QAAS,kBAAM,EAAKtC,cAA5B,0BACA,wBAAQsC,QAAS,kBAAM,EAAKtB,aAA5B,yBACA,wBAAQsB,QAAS,kBAAM,EAAKpB,YAA5B,wBACA,wBAAQoB,QAAS,kBAAM,EAAKC,cAA5B,6BACA,wBAAQD,QAAS,kBAAM,EAAKE,cAA5B,6BACA,wBAAQF,QAAS,kBAAM,EAAKb,aAA5B,sC,GA3YuBgB,IAAMC,YAuZrD,SAAS/D,EAAeE,GACrB,OAAOlC,KAAKC,MAAOiC,EAAM,IAAI,GAAI,GCnZrB8D,MARf,WACE,OACE,qBAAKV,UAAU,MAAf,SACE,cAAC,EAAD,OCKSW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhE,SAASiE,eAAe,SAM1BZ,M","file":"static/js/main.ff354564.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","export const bubbleSort = array => {\r\n    const animations = []\r\n    if (array.length <= 1) return array;\r\n\r\n    for (let i = 0; i < array.length - 1; i++) {\r\n\t\tfor (let j = 0; j < array.length - 1 - i; j++) {\r\n            let animation = {}\r\n            animation.compare = [j, j+1]\r\n            if (array[j] > array[j + 1]) {\r\n                animation.swap = [j, j+1]\r\n\t\t\t\tlet temp = array[j];\r\n\t\t\t\tarray[j] = array[j + 1];\r\n\t\t\t\tarray[j + 1] = temp;\r\n            }\r\n            animations.push(animation)\r\n\t\t}\r\n\t}\r\n\treturn animations;\r\n}\r\n\r\nexport const quickSort = array => {\r\n    if (array.length <= 1) return array;\r\n    \r\n    const animations = []\r\n    const newArr = quickSortAlgorithm(array, 0, array.length - 1, animations)\r\n    \r\n    console.log(newArr);\r\n    return animations;\r\n}\r\n\r\n\r\nconst partition = (array, left, right, animations) => {\r\n    var pivot = array[Math.floor((right + left) / 2)],\r\n        i = left,\r\n        j = right;\r\n    while (i <= j) {\r\n        while (array[i] < pivot) {\r\n            i++;\r\n        }\r\n        while (array[j] > pivot) {\r\n            j--;\r\n        }\r\n        let animation = {}\r\n        animation.compare = [i, j]\r\n        if (i <= j) {\r\n            animation.swap = [i, j]\r\n            var temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;   \r\n            i++;\r\n            j--;\r\n        }\r\n        animations.push(animation)\r\n    }\r\n    return i;\r\n}\r\n\r\nconst quickSortAlgorithm = (array, left, right, animations) => {\r\n    var index = partition(array, left, right, animations);\r\n    \r\n    if (left < index - 1) {\r\n        quickSortAlgorithm(array, left, index - 1, animations);\r\n    }\r\n    if (index < right) {\r\n        quickSortAlgorithm(array, index, right, animations);\r\n    }\r\n    return array;\r\n}\r\n\r\nconst heapify = (array, n, i, animations) =>{\r\n    let largest = i;\r\n    let l = 2 * i + 1;\r\n    let r = 2 * i + 2;\r\n    let animation = {};\r\n    animation.compareL = [l, largest];\r\n    if(l < n && array[l] > array[largest]){\r\n        largest = l;\r\n    }\r\n    animation.compareR = [r, largest]\r\n    if(r < n && array[r] > array[largest]){\r\n        largest = r;\r\n    }\r\n    if(largest != i){\r\n        animation.swap = [i, largest]\r\n        const temp = array[i];\r\n        array[i] = array[largest];\r\n        array[largest] = temp;\r\n        \r\n        animations.push(animation);\r\n\r\n        heapify(array, n, largest, animations);\r\n    }\r\n\r\n}\r\n\r\nexport const heapSort =  array => {\r\n    const n = array.length;\r\n    const animations = []\r\n    //Create max heap\r\n    console.log(\"Starting first max heap\")\r\n    for(let i=Math.floor(n/2)-1;i>=0;i--){\r\n        heapify(array, n, i, animations);\r\n    }\r\n    console.log(\"First max heap complete\")\r\n    //Swap\r\n    for(let i = n - 1; i > 0; i--){\r\n        let animation = {}\r\n        const temp = array[0];\r\n        array[0] = array[i];\r\n        array[i] = temp;\r\n        animation.swap = [0,i]\r\n        animations.push(animation)\r\n        heapify(array, i, 0, animations);\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport const selectionSort = array => {\r\n    let n = array.length;          \r\n    const animations = [];\r\n    for(let i = 0; i < n; i++) {\r\n        let min = i;\r\n        for(let j = i+1; j < n; j++){\r\n            let animation = {};\r\n            animation.compare = [j, min]\r\n            if(array[j] < array[min]) {\r\n                min=j; \r\n            }\r\n            animations.push(animation)\r\n        }\r\n        if (min != i) {\r\n            let animation = {};\r\n            animations.compare = [i, min]\r\n            animation.swap = [i, min]\r\n            let tmp = array[i]; \r\n            array[i] = array[min];\r\n            array[min] = tmp; \r\n            animations.push(animation)     \r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport const insertionSort = array => {\r\n    const animations = []\r\n    let n = array.length;\r\n    for (let i = 1; i < n; i++) {\r\n        let animation = {}\r\n        let current = array[i]; //current = i\r\n        let j = i-1; \r\n        while ((j > -1) && (current < array[j])) {\r\n            let animation = {}\r\n            animation.compare = [i, j];\r\n            animation.update = [j+1, j];\r\n            array[j+1] = array[j];\r\n            j--;\r\n            animations.push(animation)\r\n        }\r\n        animation.compare = [i, j+1]\r\n        animation.update = [j+1, i, current]\r\n        array[j+1] = current;\r\n        animations.push(animation)\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport const mergeSort = array => {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n\r\nconst mergeSortHelper = (mainArray, startIdx, endIdx, auxiliaryArray, animations,) => {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\nconst doMerge = (mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations,) => {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      animations.push([i, j]);\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      animations.push([i, i]);\r\n      animations.push([i, i]);\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      animations.push([j, j]);\r\n      animations.push([j, j]);\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }","import React from 'react'\r\nimport './SortingVisualizer.css'\r\nimport './../Algorithms/algorithms'\r\nimport { bubbleSort, quickSort, heapSort, selectionSort, insertionSort, mergeSort } from './../Algorithms/algorithms';\r\nimport Slider, {Range} from 'rc-slider'\r\nimport 'rc-slider/assets/index.css';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            width: 0,\r\n            speed: 1,\r\n            arraySize: 150,\r\n        };\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this)\r\n    }\r\n\r\n    resetArray(){\r\n        const array = [];\r\n        \r\n        if(this.state.arraySize > getMaxElements(this.state.width)){\r\n            this.setState({arraySize: getMaxElements(this.state.width)})\r\n        }\r\n\r\n        for(let i = 0; i < this.state.arraySize; i++){\r\n            array.push(randomIntFromInterval(5,700));\r\n        }\r\n        this.setState({array});\r\n\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for(let i = 0; i < arrayBars.length; i++){\r\n            arrayBars[i].style.backgroundColor='olive';\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n        this.resetArray();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n      }\r\n\r\n    updateWindowDimensions() {\r\n        this.setState({ width: window.innerWidth});\r\n        this.resetArray();\r\n      }\r\n    \r\n    bubbleSort() {\r\n        const animations = bubbleSort(this.state.array);\r\n        const newAnimations = [];\r\n        console.log(this.state.array)\r\n        console.log(animations)\r\n        for(const animation of animations){\r\n            newAnimations.push(animation.compare);\r\n            newAnimations.push(animation.compare);\r\n            newAnimations.push(animation.swap);\r\n        }\r\n        let target = 3 * this.state.array.length - 3;\r\n        let dist = 9 + (this.state.array.length - 5)*3;\r\n        let lastElem = this.state.array.length - 1;\r\n\r\n        for(let i = 0; i < newAnimations.length; i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [oneIdx, twoIdx] = newAnimations[i];\r\n                const oneStyle = arrayBars[oneIdx].style;\r\n                const twoStyle = arrayBars[twoIdx].style;\r\n                const color = i % 3 === 0 ? 'crimson' : 'olive';\r\n                setTimeout(() => {\r\n                    oneStyle.backgroundColor = color;\r\n                    twoStyle.backgroundColor = color;\r\n                }\r\n                , i * (1/this.state.speed));\r\n            } else{\r\n                setTimeout(() => {  \r\n                    if (typeof newAnimations[i] !== 'undefined'){\r\n                        const [oneIdx, twoIdx] = newAnimations[i];\r\n                        const oneStyle = arrayBars[oneIdx].style;\r\n                        const twoStyle = arrayBars[twoIdx].style;\r\n                        const temp = oneStyle.height;\r\n                        oneStyle.height = twoStyle.height;\r\n                        twoStyle.height = temp;\r\n                    }\r\n                }\r\n                , i * (1/this.state.speed))\r\n            }\r\n            if(i + 1 === target){\r\n                console.log(\"Target: \", target, \" Distance: \", dist, \" Elem: \", lastElem);\r\n                target = target + dist;\r\n                dist = dist - 3;\r\n                const currElem = lastElem;\r\n                lastElem = lastElem - 1;\r\n                setTimeout(() => {      \r\n                    arrayBars[currElem].style.backgroundColor='teal';\r\n                }\r\n                , i * (1/this.state.speed))\r\n            }\r\n        }\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        setTimeout(() => {   \r\n            arrayBars[0].style.backgroundColor='teal';\r\n        }\r\n        , newAnimations.length * (1/this.state.speed))\r\n    }\r\n\r\n    quickSort() {\r\n        const animations = quickSort(this.state.array);\r\n        const newAnimations = [];\r\n        console.log(this.state.array)\r\n        console.log(animations)\r\n        for(const animation of animations){\r\n            newAnimations.push(animation.compare);\r\n            newAnimations.push(animation.compare);\r\n            newAnimations.push(animation.swap);\r\n        }\r\n        console.log(newAnimations);\r\n        for(let i = 0; i < newAnimations.length; i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [oneIdx, twoIdx] = newAnimations[i];\r\n                const oneStyle = arrayBars[oneIdx].style;\r\n                const twoStyle = arrayBars[twoIdx].style;\r\n                const color = i % 3 === 0 ? 'crimson' : 'olive';\r\n                setTimeout(() => {\r\n                    oneStyle.backgroundColor = color;\r\n                    twoStyle.backgroundColor = color;\r\n                }\r\n                , i * 20 * (1/this.state.speed));\r\n            } else{\r\n                setTimeout(() => {  \r\n                    if (typeof newAnimations[i] !== 'undefined'){\r\n                        const [oneIdx, twoIdx] = newAnimations[i];\r\n                        const oneStyle = arrayBars[oneIdx].style;\r\n                        const twoStyle = arrayBars[twoIdx].style;\r\n                        const temp = oneStyle.height;\r\n                        oneStyle.height = twoStyle.height;\r\n                        twoStyle.height = temp;\r\n                    }\r\n                }\r\n                , i * 20 * (1/this.state.speed));\r\n            }\r\n        }\r\n        setTimeout(() => {   \r\n            this.finishArray();\r\n        }\r\n        , newAnimations.length * 20 * (1/this.state.speed))\r\n    }\r\n\r\n    heapSort(){\r\n        const animations = heapSort(this.state.array);\r\n        const newAnimations = [];\r\n        for(const animation of animations){\r\n            newAnimations.push(animation.compareL);\r\n            newAnimations.push(animation.compareL);\r\n            newAnimations.push(animation.compareR);\r\n            newAnimations.push(animation.compareR);\r\n            newAnimations.push(animation.swap);\r\n        }\r\n        let lastElem = this.state.array.length - 1;\r\n        for(let i = 0; i < newAnimations.length; i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 5 !== 4;\r\n            if (isColorChange) {\r\n                if(typeof newAnimations[i] !== 'undefined'){\r\n                    const [oneIdx, twoIdx] = newAnimations[i];\r\n                    if(typeof arrayBars[oneIdx] === 'undefined' || typeof arrayBars[twoIdx] === 'undefined'){\r\n                        console.log(\"Array size: \", this.state.array.length, \"id1: \", oneIdx, \" id2:\", twoIdx)\r\n                        this.resetArray()\r\n                        return;\r\n                    }\r\n                    const oneStyle = arrayBars[oneIdx].style;\r\n                    const twoStyle = arrayBars[twoIdx].style;\r\n                    const color = i % 5 === 0 ? 'crimson' : 'olive';\r\n                    setTimeout(() => {\r\n                        if(oneStyle.backgroundColor !== 'teal'){\r\n                            oneStyle.backgroundColor = color;\r\n                        }\r\n                        if(twoStyle.backgroundColor !== 'teal'){\r\n                            twoStyle.backgroundColor = color;\r\n                        }\r\n                    }\r\n                    , i * 10 * (1/this.state.speed));\r\n                }\r\n            } else{\r\n                // eslint-disable-next-line no-loop-func\r\n                setTimeout(() => {  \r\n                    if (typeof newAnimations[i] !== 'undefined'){\r\n                        const [oneIdx, twoIdx] = newAnimations[i];\r\n                        const oneStyle = arrayBars[oneIdx].style;\r\n                        const twoStyle = arrayBars[twoIdx].style;\r\n                        const temp = oneStyle.height;\r\n                        oneStyle.height = twoStyle.height;\r\n                        twoStyle.height = temp;\r\n                        if(twoIdx === lastElem && oneIdx === 0){\r\n                            twoStyle.backgroundColor='teal';\r\n                            lastElem = lastElem - 1;\r\n                        }\r\n                    }\r\n                }\r\n                , i * 10 * (1/this.state.speed));\r\n            }\r\n        }\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        setTimeout(() => {   \r\n            arrayBars[0].style.backgroundColor='teal';\r\n        }\r\n        , newAnimations.length * 10 * (1/this.state.speed))\r\n    }\r\n\r\n    selectSort(){\r\n        const animations = selectionSort(this.state.array);\r\n        const newAnimations = [];\r\n        console.log(this.state.array)\r\n        console.log(animations)\r\n        for(const animation of animations){\r\n            newAnimations.push(animation.compare);\r\n            newAnimations.push(animation.compare);\r\n            newAnimations.push(animation.swap);\r\n        }\r\n        console.log(newAnimations);\r\n        for(let i = 0; i < newAnimations.length; i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                if(typeof newAnimations[i] !== 'undefined'){\r\n                    const [oneIdx, twoIdx] = newAnimations[i];\r\n                    const oneStyle = arrayBars[oneIdx].style;\r\n                    const twoStyle = arrayBars[twoIdx].style;\r\n                    const color = i % 3 === 0 ? 'crimson' : 'olive';\r\n                    setTimeout(() => {\r\n                        oneStyle.backgroundColor = color;\r\n                        twoStyle.backgroundColor = color;\r\n                    }\r\n                    , i * 2 * (1/this.state.speed));\r\n                }\r\n            } else{\r\n                setTimeout(() => {  \r\n                    if (typeof newAnimations[i] !== 'undefined'){\r\n                        const [oneIdx, twoIdx] = newAnimations[i];\r\n                        const oneStyle = arrayBars[oneIdx].style;\r\n                        const twoStyle = arrayBars[twoIdx].style;\r\n                        const temp = oneStyle.height;\r\n                        oneStyle.height = twoStyle.height;\r\n                        oneStyle.backgroundColor = 'teal'\r\n                        twoStyle.height = temp;\r\n                    }\r\n                }\r\n                , i * 2 * (1/this.state.speed));\r\n            }\r\n        }\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        setTimeout(() => {   \r\n            arrayBars[this.state.array.length - 1].style.backgroundColor='teal';\r\n        }\r\n        , newAnimations.length * 2 * (1/this.state.speed))\r\n    }\r\n\r\n    insertSort(){\r\n        const animations = insertionSort(this.state.array);\r\n        const newAnimations = [];\r\n        console.log(this.state.array)\r\n        console.log(animations)\r\n        for(const animation of animations){\r\n            newAnimations.push(animation.compare);\r\n            newAnimations.push(animation.compare);\r\n            newAnimations.push(animation.update);\r\n        }\r\n        console.log(newAnimations);\r\n        for(let i = 0; i < newAnimations.length; i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [oneIdx, twoIdx] = newAnimations[i];\r\n                const oneStyle = arrayBars[oneIdx].style;\r\n                const twoStyle = arrayBars[twoIdx].style;\r\n                const color = i % 3 === 0 ? 'crimson' : 'olive';\r\n                setTimeout(() => {\r\n                    oneStyle.backgroundColor = color;\r\n                    twoStyle.backgroundColor = color;\r\n                }\r\n                , i * 5 * (1/this.state.speed));\r\n            } else{\r\n                setTimeout(() => {  \r\n                    if (typeof newAnimations[i] !== 'undefined'){\r\n                        if(newAnimations[i].length > 2){\r\n                            const [oneIdx, twoIdx, value] = newAnimations[i];\r\n                            const oneStyle = arrayBars[oneIdx].style;\r\n                            oneStyle.height = `${value}px`;\r\n                        }\r\n                        else{\r\n                            const [oneIdx, twoIdx] = newAnimations[i];\r\n                            const oneStyle = arrayBars[oneIdx].style;\r\n                            const twoStyle = arrayBars[twoIdx].style;\r\n                            oneStyle.height = twoStyle.height;\r\n                        }\r\n                    }\r\n                }\r\n                , i * 5 * (1/this.state.speed));\r\n            }\r\n        }\r\n        setTimeout(() => {   \r\n            this.finishArray();\r\n        }\r\n        , newAnimations.length * 5 * (1/this.state.speed))\r\n    }\r\n\r\n    mergeSort(){\r\n        const animations = mergeSort(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? 'crimson' : \"olive\";\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * 10 * (1/this.state.speed));\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * 10 * (1/this.state.speed));\r\n            }\r\n        }\r\n        setTimeout(() => {   \r\n            this.finishArray();\r\n        }\r\n        , animations.length * 10 * (1/this.state.speed))\r\n    }\r\n\r\n    finishArray(){\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for(let i = 0; i < this.state.array.length; i++){\r\n            setTimeout(() => {   \r\n                arrayBars[i].style.backgroundColor='teal';\r\n            }\r\n            , i * 10 * (1/this.state.speed))\r\n        }\r\n    }\r\n\r\n    onSliderChange = value => {\r\n        this.setState({speed: value});\r\n    }\r\n    onSliderArrayChange = value => {\r\n        if (value < getMaxElements(this.state.width)){\r\n            this.setState({arraySize: value});\r\n            this.resetArray()\r\n        }\r\n    }\r\n\r\n    render()  {\r\n        const {array} = this.state;\r\n        const width = getBarWidth(this.state.width, this.state.array.length)\r\n        return(\r\n            <>\r\n                <div className=\"container\">\r\n                    {array.map((value, idx) => (\r\n                        <div className=\"array-bar\"\r\n                        key={idx}\r\n                        style={{height: `${value}px`, width:`${width}px`}}></div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"controls\">\r\n                    <a>Speed: {this.state.speed}</a>\r\n                        <br />\r\n                        <Slider \r\n                            min={0.01}\r\n                            max={4}\r\n                            step={0.01}\r\n                            value={this.state.speed}\r\n                            onChange={this.onSliderChange}\r\n                        />\r\n                    <a>Array Size: {this.state.arraySize}</a>\r\n                    <br />\r\n                    <Slider \r\n                        min={5}\r\n                        max={getMaxElements(this.state.width)}\r\n                        step={1}\r\n                        value={this.state.arraySize}\r\n                        onChange={this.onSliderArrayChange}\r\n                    />    \r\n                    <br></br>\r\n                    <button onClick={() => this.resetArray()}> Generate New Array</button>\r\n                    <br></br>\r\n                    <div className=\"grid-container\">\r\n                        <button onClick={() => this.bubbleSort()}> Bubble Sort</button>\r\n                        <button onClick={() => this.quickSort()}> Quick Sort</button>\r\n                        <button onClick={() => this.heapSort()}> Heap Sort</button>\r\n                        <button onClick={() => this.selectSort()}> Selection Sort</button>\r\n                        <button onClick={() => this.insertSort()}> Insertion Sort</button>\r\n                        <button onClick={() => this.mergeSort()}> Merge Sort</button>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) +  min);\r\n}\r\n\r\nfunction getMaxElements(width){\r\n   return Math.floor((width/100*90)/6)\r\n}\r\n\r\nfunction getBarWidth(width, amount){\r\n    if (typeof width !== 'undefined'){\r\n        width = Math.floor(width * 0.88);\r\n        let newWidth = Math.floor(width/amount)\r\n        return newWidth - 2;\r\n    }\r\n    else return 7;\r\n\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}